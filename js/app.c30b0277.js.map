{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/img/interlock_4.jpg","webpack:///./src/assets/img/eavesdropping_3.jpg","webpack:///./src/views/Encryption.vue?8c1d","webpack:///./src/assets/img/perf_eve_kripke.png","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/views/Home.vue","webpack:///./src/views/Home.vue?ab8c","webpack:///./src/views/Simulation.vue","webpack:///./src/views/Simulation.vue?6dda","webpack:///./src/views/Methods.vue","webpack:///./src/views/Methods.vue?ef2f","webpack:///./src/views/Formalism.vue","webpack:///./src/components/MathJax.vue","webpack:///./src/components/MathJax.vue?cdd7","webpack:///./src/views/Formalism.vue?e26f","webpack:///./src/views/Discussion.vue","webpack:///./src/views/Discussion.vue?07f0","webpack:///./src/views/Encryption.vue","webpack:///./src/views/Encryption.vue?f126","webpack:///./src/views/NotFound.vue","webpack:///./src/views/NotFound.vue?8fd3","webpack:///./src/views/References.vue","webpack:///./src/views/References.vue?82d9","webpack:///./src/router/index.js","webpack:///./src/main.js","webpack:///./src/assets/img/perfect_communication_1.jpg","webpack:///./src/assets/img/eavesdropping_1.jpg","webpack:///./src/views/Formalism.vue?5a79","webpack:///./src/assets/img/perf_kripke.png","webpack:///./src/assets/img/perfect_communication_2.jpg","webpack:///./src/assets/img/interlock_3.jpg","webpack:///./src/assets/img/interlock_2.jpg","webpack:///./src/views/Home.vue?240c","webpack:///./src/App.vue?2c1b","webpack:///./src/assets/img/interlock_1.jpg","webpack:///./src/assets/img/eavesdropping_2.jpg","webpack:///./src/views/Simulation.vue?3758","webpack:///./src/assets/img/incognito_logo.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","class","role","type","id","for","src","to","Component","mounted","mathjaxScript","document","createElement","setAttribute","async","head","appendChild","MathJax","tex","inlineMath","svg","fontCache","render","formula","__scopeId","href","target","rel","style","toggleCollapsible","isShowingCollapsible","methods","this","alt","$route","ref","props","components","CLASS","typeset","error","console","log","routes","path","component","Home","Formalism","Encryption","Methods","Discussion","Simulation","References","NotFound","router","createRouter","history","createWebHistory","createApp","App","use","mount"],"mappings":"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","file":"js/app.c30b0277.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/eavesdropping-lamas/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __webpack_public_path__ + \"img/interlock_4.099cd428.jpg\";","module.exports = __webpack_public_path__ + \"img/eavesdropping_3.3acba6e6.jpg\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Encryption.vue?vue&type=style&index=0&id=9815b01a&scoped=true&lang=css\"","module.exports = __webpack_public_path__ + \"img/perf_eve_kripke.2ae9fe52.png\";","<template>\n  <div>\n    <header class=\"header navbar-fixed-top\">\n      <!-- Navbar -->\n      <nav class=\"navbar\" role=\"navigation\">\n        <div class=\"container\">\n          <!-- Brand and toggle get grouped for better mobile display -->\n          <div class=\"menu-container js_nav-item\"></div>\n          <!-- HAMBURGER MENU ICON -->\n          <input\n            class=\"toggle-button\"\n            type=\"checkbox\"\n            name=\"toggle\"\n            id=\"toggle\"\n          />\n          <label for=\"navbar-toggle\"></label>\n          <!-- Collect the nav links, forms, and other content for toggling -->\n          <div class=\"menu-mobile\">\n            <div class=\"collapse navbar-collapse nav-collapse\">\n              <div class=\"menu-container\">\n                <ul class=\"nav navbar-nav container-right\">\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'Home',\n                      }\"\n                      :to=\"{ name: 'Home' }\"\n                      >Home</router-link\n                    >\n                  </li>\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'Encryption',\n                      }\"\n                      :to=\"{ name: 'Encryption' }\"\n                      >Encryption</router-link\n                    >\n                  </li>\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'Methods',\n                      }\"\n                      :to=\"{ name: 'Methods' }\"\n                      >Methods</router-link\n                    >\n                  </li>\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'Formalism',\n                      }\"\n                      :to=\"{ name: 'Formalism' }\"\n                      >Formalism</router-link\n                    >\n                  </li>\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'Simulation',\n                      }\"\n                      :to=\"{ name: 'Simulation' }\"\n                      >Simulation</router-link\n                    >\n                  </li>\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'Discussion',\n                      }\"\n                      :to=\"{ name: 'Discussion' }\"\n                      >Discussion</router-link\n                    >\n                  </li>\n                  <li class=\"js_nav-item nav-item\">\n                    <router-link\n                      :class=\"{\n                        'nav-item-child': true,\n                        activebutton: $route.name === 'References',\n                      }\"\n                      :to=\"{ name: 'References' }\"\n                      >References</router-link\n                    >\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </header>\n    <div class=\"view\">\n      <router-view v-slot=\"{ Component }\">\n        <transition name=\"fade\" mode=\"out-in\">\n          <component :is=\"Component\"></component>\n        </transition>\n      </router-view>\n    </div>\n    <img src=\"./assets/img/incognito_logo.png\" class=\"bottom-right\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  mounted() {\n    let mathjaxScript = document.createElement(\"script\");\n    mathjaxScript.setAttribute(\n      \"src\",\n      \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    );\n    mathjaxScript.setAttribute(\"id\", \"MathJax-script\");\n    mathjaxScript.async = true;\n    document.head.appendChild(mathjaxScript);\n\n    window.MathJax = {\n      tex: {\n        inlineMath: [\n          [\"$\", \"$\"],\n          [\"\\\\(\", \"\\\\)\"],\n        ],\n      },\n      svg: {\n        fontCache: \"global\",\n      },\n    };\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  padding: 0px;\n  overflow: scroll;\n  overflow-x: hidden;\n  line-height: 1.5em;\n}\n\nh1 {\n  margin: 0.5em;\n}\nh2 {\n  margin: 1.5em;\n}\nh3 {\n  margin: 1em;\n}\nh4 {\n  margin: 1em;\n}\n\nit {\n  font-style: italic;\n}\n\n.blog {\n  display: flex;\n  width: 100%;\n  padding-top: 100px;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n  flex-direction: column;\n  background-color: white;\n}\n\n.blog > p {\n  padding: 0.5em 6em;\n}\n.blog > ul {\n  padding: 1em 9em;\n}\n.blog > ul > li {\n  /* padding: 1em 9em; */\n  margin-bottom: 0.5em;\n}\n.blog > ol {\n  padding: 1em 9em;\n}\n\nimg {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n  max-width: 100%;\n  height: auto;\n  -webkit-transition: all 0.2s ease-in;\n  -moz-transition: all 0.2s ease-in;\n  -ms-transition: all 0.2s ease-in;\n  -o-transition: all 0.2s ease-in;\n  transition: all 0.2s ease-in;\n}\n\nimg:hover {\n  -webkit-transition: all 0.3s ease-in;\n  -moz-transition: all 0.3s ease-in;\n  -ms-transition: all 0.3s ease-in;\n  -o-transition: all 0.3s ease-in;\n  transition: all 0.3s ease-in;\n  opacity: 1;\n  transform: scale(1.4);\n  -ms-transform: scale(1.4); /* IE 9 */\n  -webkit-transform: scale(1.4); /* Safari and Chrome */\n}\n\nimg:active {\n  -webkit-transition: all 0.3s ease-in;\n  -moz-transition: all 0.3s ease-in;\n  -ms-transition: all 0.3s ease-in;\n  -o-transition: all 0.3s ease-in;\n  transition: all 0.3s ease-in;\n  opacity: 1;\n  transform: scale(1.4);\n  -ms-transform: scale(1.4); /* IE 9 */\n  -webkit-transform: scale(1.4); /* Safari and Chrome */\n}\n\n.bottom-right {\n  position: fixed;\n  width: 3%;\n  height: auto;\n  bottom: 5px;\n  left: 5px;\n  transition: width 100ms ease-out 100ms;\n  -webkit-animation-duration: 5s;\n  animation-duration: 5s;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n}\n\n.bottom-right:hover {\n  width: 4%;\n}\n\n/* Header fixed and background colors */\n\n.header {\n  position: fixed;\n  top: 0px;\n  max-height: 100px;\n  z-index: 999;\n  width: 100%;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n  opacity: 1;\n}\n\n/* UL element Navigation Main Menu */\n\n.navbar-collapse {\n  max-height: 100%;\n  padding-left: 0;\n  padding-right: 0;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar {\n  margin-bottom: 0;\n  background-color: #003366;\n  border-radius: 0px;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar-nav {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.header .navbar {\n  margin-bottom: 0;\n  background-color: #1a1a44;\n  border-bottom: 3px #ae952e solid;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n  position: relative;\n  min-height: 100px;\n  margin-bottom: 20px;\n}\n\n.navbar-nav {\n  padding-right: 30px;\n  display: flex;\n}\n\n/* Menu LI items and children */\n\n.navbar-nav {\n  list-style: none;\n  margin-top: 20px;\n  padding-right: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-content: center;\n}\n\nli.nav-item {\n  /* position: relative; */\n  font-size: 1em;\n  font-weight: bold;\n  float: left;\n  height: 50px;\n\n  /* padding-left: 30px; */\n}\n\na.nav-item-child {\n  font-size: 1em;\n  font-family: \"Oswald\", sans-serif !important;\n  color: #fff;\n  line-height: 25px;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.navbar-nav > li.nav-item > a:hover {\n  margin-bottom: 10px;\n  border-bottom: 2px solid #ae952e;\n  padding-bottom: 3px;\n  color: #ccc;\n}\n\nheader .nav-item-child:focus,\n.header .nav-item-child:hover {\n  background: inherit;\n}\n\n/* MAX-WIDTH 767px */\n@media (max-width: 767px) {\n  .header .menu-container {\n    padding-left: 15px;\n    padding-right: 15px;\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  .header .navbar > .container,\n  .header .navbar > .container > .nav-collapse {\n    padding-left: 0;\n    padding-right: 0;\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  .header .navbar > .container {\n    width: auto;\n  }\n}\n\n.header .nav-item-hover:after,\n.link:after,\n.work .work-overlay:before {\n  content: \" \";\n}\n\n.header .navbar-toggle {\n  width: 45px;\n  height: 35px;\n  border: none;\n  margin: 35px 0;\n  position: relative;\n  float: right;\n  padding: 9px 10px;\n  margin-top: 31px;\n  margin-right: 35px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n\n.header .navbar-toggle .toggle-icon {\n  position: relative;\n  width: 21px;\n  height: 1px;\n  display: inline-block;\n  background: #fff;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar-toggle .toggle-icon:after,\n.header .navbar-toggle .toggle-icon:before {\n  position: absolute;\n  left: 0;\n  background: #fff;\n  content: \" \";\n}\n\n.header .navbar-toggle .toggle-icon:before {\n  width: 10px;\n  height: 1px;\n  bottom: 10px;\n  -webkit-transform: rotate(0);\n  -moz-transform: rotate(0);\n  transform: rotate(0);\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar-toggle .toggle-icon:after {\n  width: 16px;\n  height: 1px;\n  top: -5px;\n  -webkit-transform: rotate(0);\n  -moz-transform: rotate(0);\n  transform: rotate(0);\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar-toggle:hover .toggle-icon {\n  background: #ae952e;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar-toggle:hover .toggle-icon:after,\n.header .navbar-toggle:hover .toggle-icon:before {\n  width: 21px;\n  height: 1px;\n  background: #ae952e;\n  transition-duration: 0.3s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .header .logo-img-main,\n.header .nav-item.active .nav-item-hover:after,\n.header .nav-item:hover .nav-item-hover:after {\n  transition-duration: 0.4s;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.7, 1, 0.7, 1);\n}\n\n.header .navbar-toggle:hover .toggle-icon.is-clicked {\n  background: rgba(81, 87, 105, 0);\n}\n\n/* MIN-WIDTH 768px */\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n  .toggle-button {\n    visibility: hidden;\n  }\n}\n\n/* MAX-WIDTH 991px */\n@media (max-width: 991px) {\n  .header .navbar-nav {\n    margin: 0;\n    float: none;\n    flex-direction: column;\n  }\n\n  .header .navbar-nav .nav-item {\n    float: none;\n  }\n\n  .header .menu-container:after,\n  .header .menu-container:before {\n    content: \" \";\n    display: table;\n  }\n\n  .header .menu-container:after {\n    clear: both;\n  }\n\n  .header .logo .logo-img-main {\n    display: none;\n  }\n\n  .header .logo .logo-img-active {\n    display: inline-block;\n  }\n\n  .header .nav-item-child {\n    line-height: 1.4;\n    padding: 12px 12px 12px 15px;\n  }\n\n  .header .nav-item-hover:after {\n    position: absolute;\n    top: 19px;\n  }\n\n  /*======= TOGGLE MENU ======*/\n\n  #toggle,\n  #toggle + label {\n    display: inherit;\n  }\n\n  #toggle {\n    width: 45px;\n    height: 40px;\n    opacity: 0;\n    border: none;\n    margin: 35px 0;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    z-index: 1000;\n    float: right;\n    padding: 9px 10px;\n    margin-top: 31px;\n    margin-right: 35px;\n    margin-bottom: 8px;\n    background-color: transparent;\n    background-image: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n\n  .menu-mobile {\n    padding-top: 90px;\n    text-align: center;\n    background: #1a1a44;\n    color: #fff;\n    width: 100%;\n    height: 0px;\n    overflow: hidden;\n    transition: height 300ms cubic-bezier(0.17, 0.04, 0.03, 0.94);\n  }\n\n  #toggle:checked ~ .menu-mobile {\n    height: 350px;\n  }\n\n  #toggle + label {\n    position: absolute;\n    top: 27px;\n    right: 50px;\n    border: none;\n    color: #ffffff;\n    background-color: transparent;\n    background-image: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n  }\n\n  #toggle + label:after {\n    content: \"\\2630\";\n    font-size: 1.7em;\n  }\n\n  #toggle:hover + label {\n    color: #ae952e;\n  }\n\n  #toggle:checked ~ .message {\n    height: 150px;\n  }\n\n  #toggle:checked + label:after {\n    content: \"\\2573\";\n    font-size: 1.4em;\n  }\n}\n\n/* MIN-WIDTH 992px */\n@media (min-width: 992px) {\n  .header .navbar-nav-right {\n    float: right;\n  }\n}\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=ee6613e0\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=ee6613e0&lang=css\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"blog\">\n    <h1>Introduction</h1>\n    <p>\n      <span class=\"first-letter\">C</span\n      ><it>ommunication is information in motion</it>, the dynamics of which are\n      described by the changing knowledge and beliefs for some set of agents.\n      Remembering that knowledge is power, agents may wish to carefully control\n      the flow of information in a system by way of\n      <it>private communication</it>. This proves to be a non-trivial task when\n      a third-party agent wishes to <it>eavesdrop</it> on an information\n      exchange. The archetypical defense against eavesdropping is\n      <it>encryption</it>, whereby the true meaning of messages are disguised by\n      an encoding that is uniquely readable to the agent for which a message is\n      intended. However, an eavesdropping agent may employ a trick such that\n      communicating agents believe they are encoding messages for their partner,\n      but instead encode them for the eavesdropper. How then can private\n      communication be achieved? Can communicating agents ever know that their\n      exchange of information is indeed private?\n    </p>\n    <p>\n      Here we present three cases of \"private communication\" as outlined, along\n      with graphic simulations in the spirit of, and novel epistemic formalism.\n      First we illustrate a basic RSA encryption protocol with the case of\n      perfect, deletion-error-free communication between two agents, Alice and\n      Bob. We then demonstrate how this method is vulnerable to breeches in\n      privacy through belief-manipulation with the introduction of an\n      eavesdropping agent Eve. Finally, we present the \"interlocks\" protocol\n      [<router-link :to=\"{ name: 'References' }\">2</router-link>] as a solution\n      to the eavesdropping, whereby Alice and Bob are guaranteed to become aware\n      of the presence of Eve and may therefore cease communication on that\n      compromised line.\n    </p>\n    <p>\n      At this point, you may be asking yourself, \"Why bother with privacy? I've\n      got nothing to hide.\" Luckily, we may refer you to [<router-link\n        :to=\"{ name: 'References' }\"\n        >4</router-link\n      >], wherein you will find that you indeed do have an interest in\n      maintaining privacy whenever possible in personal communication. The need\n      for privacy extends much farther than revolutionaries, spies, and\n      nefarious agents. <br />\n      As aforementioned, knowledge is power. Knowledge\n      <it>about</it> us can be wielded as power <it>over</it> us. If we are\n      laissez-faire with who can listen in on our communication, then we have no\n      way of knowing what their interest in our information might be. From\n      targeted advertisement to predicting our behaviour to a deliberate\n      shifting of our political views, the more that is known about us, the more\n      effectively we may be influenced. The first step in protecting ourselves\n      from listeners with unknown intent is to know in what cases we are being\n      listened to. When are we in the presence of an Eve?\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      formula: \"\",\n    };\n  },\n};\n</script>\n\n<style scoped>\n.first-letter {\n  float: left;\n  font-size: 75px;\n  line-height: 60px;\n  padding-top: 4px;\n  padding-right: 8px;\n  color: #4caf50;\n  padding-left: 3px;\n}\n</style>\n","import { render } from \"./Home.vue?vue&type=template&id=47798d78&scoped=true\"\nimport script from \"./Home.vue?vue&type=script&lang=js\"\nexport * from \"./Home.vue?vue&type=script&lang=js\"\n\nimport \"./Home.vue?vue&type=style&index=0&id=47798d78&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-47798d78\"\n\nexport default script","<template>\n  <div class=\"blog\">\n    <h1>Simulation</h1>\n    <p>\n      This page gives a description of the simulation below, as well as the link\n      to the code itself. The code needs to be run on your own computer and\n      cannot be run in this browser.\n    </p>\n\n    <a\n      href=\"https://github.com/Brandsma/LAMAS\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      ><button class=\"github-button\">\n        <div class=\"button-content\">\n          <img\n            style=\"width: 20%\"\n            src=\"https://img.icons8.com/fluent/48/000000/github.png\"\n          />Project Code\n        </div>\n      </button></a\n    >\n\n    <p>\n      <button\n        type=\"button\"\n        v-on:click=\"toggleCollapsible\"\n        :class=\"{ collapsible: true, active: isShowingCollapsible }\"\n      >\n        Show Project README\n      </button>\n    </p>\n    <div\n      :class=\"{\n        content: !isShowingCollapsible,\n        'content-not-hidden': isShowingCollapsible,\n      }\"\n    >\n      <h2>Overview of the model</h2>\n\n      <p>\n        The model mainly consists of a communication framework between two\n        agents, originally based on the LOKWebs assignments. Two agents\n        communicate messages through a channel which they do not operate. Agents\n        send confirmation messages up until the confirmation depth is achieved,\n        at which point they know that the other has received knowledge of an\n        order which is satisfactory. From this base many features are added;\n        communication using encryption, two-way communication, eavesdropping,\n        the eavesdrop detecting interlock protocol, and any (theoretically\n        possible) permutation of these features.\n        <br />\n        The design of the model places a high priority on modularity and sound\n        architecture. This is made apparent by the ease of integration between\n        the different modes of operation.\n\n        <br />\n        Thoughout the model care is taken to comment where explanation of the\n        model is required. Comments are often notes for the programmer, but also\n        do a good job explaining the why of a piece of code to the technical\n        reader.\n      </p>\n\n      <h2>Model entities</h2>\n      <pre>\nProcess : The highest level entity, used mainly to keep track of the order of events using Lamports time \n          algorithm for distributed systems. (I would have loved to upgrade to vector clocks, \n          but priorities lay elsewhere)\n\n    Channel : A one-way communication channel facilitating communication between agents. \n              Modular design using buffers.\n\n    Agent : A communicating entity -- capable of message handling, connecting with channels, encryption \n            and interlock protocols, different reporters.\n        Sender : A subtype of an agent harbouring the capabilties of producing, sending and \n                 acknowledging messages.\n        Receiver : A subtype of an agent harbouring the capabilities of receiving and \n                   acknowledging messages.\n            Communicator : A subtype of an agent inheritting from both Sender and Receiver, used for \n                           two-way communication\n\n    Eavesdropper : Eavesdropper process, utilizing two agents spoofing connection to the 'real' \n                   communicators. Real Alice meet Fake Bob, Real Bob meet Fake Alice.\n\n    Message : An object used as communication vessel.\n\nStepper : Controlling entity scheduling when which process acts. \n</pre\n      >\n\n      <h2>Basic model loop</h2>\n\n      <p>\n        The stepper controls which process acts at which point. It does so\n        sequentially. A sending agent prepares their message they want to send\n        by placing it in their outgoing buffer. The message is moved from their\n        outgoing buffer to the incomming buffer of their outgoing-connected\n        channel. From there it is moved to that channels 'chute', which then\n        transfers the message to its outgoing buffer. From there the message is\n        moved to the incomming buffer of the receiving agent. The receiving\n        agent reads the message, decides whether or not to acknowledge the\n        message (and place it in their own outgoing buffer), to store the\n        message, or to respond with their own message (two-way communication).\n        The process is repeated symetrically using a different channel. When\n        there is an eavesdropper in the model, it hijacks the communication\n        channels and places its own spoofed agents on either side. This means\n        there are now four communication channels instead of two. The\n        eavesdropper transfers messages received on one side to the other side,\n        to give the illusion the unknowing agents are speaking to eachtoher\n        without anyone listening. With encryption, agents first produce their\n        private/public key pair and exchange public keys. They will encrypt\n        their outgoing messages with the public key received from the other\n        party, and decrypt incomming ciphertext with their own private key. The\n        encryption algorithm used is RSA. Encryption is applied when transfering\n        their message from their output buffer to the channels input buffer.\n        With the interlock protocol, agents split their outgoing message (after\n        encryption) when transfering their message from their output buffer to\n        their outgoing channels input buffer. A message is split in half, the\n        remaining half is stored and sent (only) after receiving a new message\n        (that is not an acknowledge) by the other party.\n      </p>\n      <h2>How to run the program (basic):</h2>\n\n      <pre class=\"code\">\nrun \"python main.py\"\n</pre\n      >\n\n      <h2>\"What is the output?\":</h2>\n      <p>\n        The output of the model shows the messages each agent has in their\n        sending and receiving list, both at the start and the end of the model.\n        This shows that the model is working properly and messages intended to\n        send are sent and received. It also shows that the eavesdropper knows\n        the messages. A highly detailed log of what happens can be enabled by\n        setting \"print_log_to_terminal\" and/or \"print_channel_content\" to true\n        in the config.py file.<br />\n        Note that when encryption is turned on, output can be more messy, as\n        encryption keys and encrypted texts are long and machine-readable.\n      </p>\n\n      <h2>How to change the model / experiment with settings:</h2>\n\n      <p>\n        Most of the relevant settings can be found in the \"config.py\" file. At\n        the top of this file the reader will find many switches for different\n        modes of running the program:\n      </p>\n      <ul>\n        <li>\n          encryption_protocol (Will agents use encryption when communicating?)\n        </li>\n        <li>\n          include_eavesdropper (Is there an eavesdropper through which the\n          agents communicate?)\n        </li>\n        <li>\n          two_way_communication (Is communication one or two way? Two way means\n          both send and receive message content. One-way still includes\n          acknowledges from the receiver)\n        </li>\n        <li>\n          interlock_protocol (Is the interlock protocol employed in\n          communication?)\n        </li>\n      </ul>\n\n      <p>As well as operating parameters:</p>\n      <ul>\n        <li>\n          stepper_time_limit (How many steps the program will take, recommended\n          to keep at 300+ to see a full execution)\n        </li>\n        <li>\n          message_timeout (How long an agent waits before resending a message --\n          setting to a value other than 1 can produce strange behaviour)\n        </li>\n        <li>\n          acknowledge_depth (The number of acknowledges required in total -- can\n          be seen as the \"order of theory of mind-level\" parameter, recommended\n          to read the warning messages below before changing.)\n        </li>\n      </ul>\n\n      <p>\n        Some failure model parameters, not yet properly implemented (but can be\n        done with easy, if the instructor of the course is interested in a\n        better version of the LOKwebs model ;) --> contact Ivo)\n      </p>\n\n      <p>Some output parameters:</p>\n      <ul>\n        <li>\n          save_log_to_file (Save a log trace of all actions/states to file, used\n          for the animations)\n        </li>\n        <li>\n          print_log_to_terminal (Print the log trace of all actions to the\n          terminal, for debugging and inspection)\n        </li>\n        <li>\n          print_channel_content (Print the channel content at certain moments to\n          the terminal. Not as expressive as the log trace, but more easy to\n          read)\n        </li>\n        <li>\n          loglevel (Log statements thoughout the model, can be set at\n          logging.DEBUG for most expressive, then logging.INFO, logging.WARNING,\n          logging.ERROR for least expressive)\n        </li>\n      </ul>\n\n      <h2>How to run the modes manually (advanced):</h2>\n      <p>\n        The model runs from the file main.py, which calls the\n        communication_demo.py file. This file describes the protocol that is\n        initiated for a single run. The advanced user can observe the order\n        components initialized and invoked here. Changes in here should be\n        limited to changing the message content and switching connections. For\n        any really advanced changes, reading the documentation of the structure\n        and entities is strongly recommended.\n      </p>\n\n      <h2>\"Why does this not work?\"</h2>\n      <p>\n        Certain parameter combinations are theoretically incongruent. Most\n        notably:\n      </p>\n\n      <ul>\n        <li>\n          an uneven value for the acknowledge_depth parameter is required for\n          one-way communication\n        </li>\n        <li>\n          an even value for the acknowledge_depth parameter is required for\n          two-way communication\n        </li>\n        <li>\n          a value of 0 for the acknowledge_depth parameter is required for the\n          interlock_protocol\n        </li>\n        <li>the interlock_protocol requires two-way communication</li>\n        <li>\n          (!) the interlock_protocol combined with the eavesdropper will result\n          in a decryption error\n        </li>\n      </ul>\n\n      <h2>Note about the logic folder</h2>\n\n      <p>\n        The logic folder houses some code that was intended to be used for\n        knowledge representation in the model and includes an automatic solver\n        for S5-like models. During the project, we decided that the\n        knowledge-side of the project was more suited to be modelled statically.\n        This can be found on the website under the 'Formalism' section.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Simulation\",\n  data() {\n    return {\n      isShowingCollapsible: false,\n    };\n  },\n  methods: {\n    toggleCollapsible: function () {\n      this.isShowingCollapsible = !this.isShowingCollapsible;\n    },\n  },\n};\n</script>\n\n<style style=\"scss\" scoped>\npre {\n  width: 100%;\n  background-color: #e1e1e1;\n  color: black;\n  padding: 10px;\n}\n\n.github-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 12px;\n  background: white;\n  border: 2px solid #2c3e50;\n  margin: 20px;\n}\n\n.github-button:hover {\n  background: #f0f0f0;\n  cursor: pointer;\n}\n\n.button-content {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  margin: 6px;\n  text-decoration: none;\n}\n\n.collapsible {\n  display: flex;\n  justify-content: center;\n  background-color: #777;\n  color: white;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n}\n\n.active,\n.collapsible:hover {\n  background-color: #555;\n}\n\n.content {\n  padding: 0.5em 6em;\n  display: none;\n  overflow: hidden;\n  background-color: #f1f1f1;\n}\n\n.content-not-hidden {\n  padding: 0.5em 6em;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: #f1f1f1;\n}\n.content-not-hidden > p {\n  width: 100%;\n}\n.content-not-hidden > ul {\n  width: 100%;\n}\n\n.content-not-hidden > ol {\n  width: 100%;\n}\n</style>\n","import { render } from \"./Simulation.vue?vue&type=template&id=8b16aab6&scoped=true\"\nimport script from \"./Simulation.vue?vue&type=script&lang=js\"\nexport * from \"./Simulation.vue?vue&type=script&lang=js\"\n\nimport \"./Simulation.vue?vue&type=style&index=0&id=8b16aab6&style=scss&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-8b16aab6\"\n\nexport default script","<template>\n  <div class=\"blog\">\n    <h1>{{ $route.name }}</h1>\n\n    <img\n      class=\"image\"\n      src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.hdnicewallpapers.com%2FWalls%2FBig%2FCat%2FBeautiful_Angry_Kitten.jpg&f=1&nofb=1\"\n      alt=\"It's a cat\"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Methods\",\n};\n</script>\n\n<style scoped></style>\n","import { render } from \"./Methods.vue?vue&type=template&id=0fda077c\"\nimport script from \"./Methods.vue?vue&type=script&lang=js\"\nexport * from \"./Methods.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"blog\">\n    <h1>{{ $route.name }}</h1>\n    <h2>Perfect Communication - S5 Model</h2>\n    <p>\n      Let us now abstract to the simplest scenario where Alice has only two\n      possible public keys, and Bob has only two possible messages to\n      communicate with Alice. Realize that the fundamental logic of this\n      abstraction holds symmetrically for communication in the opposite\n      direction, as well as iterativily for any number of possible keys and\n      messages. In fact, we invite you to imagine that the first possible public\n      key for Alice represents her actual key, and the second key stands in for\n      <it>all possible other keys</it>. Likewise, please think of Bob's first\n      possible message as his actual message, and the second possible message as\n      all possible other messages. The logic and relations work the same whether\n      these secondary keys and messages are inductively expanded or collapsed.\n      For a similar example of \"inductive collapse\", we refer the reader to\n      [<router-link :to=\"{ name: 'References' }\">1</router-link>]. As a final\n      note, the reflexivity relationships have not been drawn for simplicity's\n      sake.\n    </p>\n\n    <p>\n      In the first figure below, we may see the epistemic states unfold for this\n      simplified communication, where there are only two possible public keys\n      for Alice (\n      <math-jax :formula=\"'$pubA1$'\"></math-jax>\n      and\n      <math-jax :formula=\"'$pubA2$'\"></math-jax>\n      ), and two possible messages Bob might send (<it>p</it> and <it>q</it>).\n    </p>\n\n    <p>\n      Here we assume that in the initial state (top-left in the figure), Alice\n      knows her key and Bob knows the message he wants to send. Therefore, Alice\n      cannot distinguish between\n      <math-jax :formula=\"'$mBp$'\"></math-jax> and\n      <math-jax :formula=\"'$mBq$'\"></math-jax>, while Bob cannot distinguish\n      between <math-jax :formula=\"'$pubA1$'\"></math-jax> and\n      <math-jax :formula=\"'$pubA2$'\"></math-jax>. This is described by the\n      appropriate accessibility relations which indicate which worlds must be\n      simultaneously accepted as possible for a given agent. Note, all worlds\n      have reflexive relations for all agents and that these are\n      <it>S5-Kripke structures.</it>\n    </p>\n\n    <p>\n      Once Bob receives Alice's public key, Bob now knows whether it is\n      <math-jax :formula=\"'$pubA1$'\"></math-jax> or\n      <math-jax :formula=\"'$pubA2$'\"></math-jax>. He cannot accept both of these\n      states as simultaneously true and therefore all accessibility relations\n      between the two possible public keys drop out. Now that\n      <math-jax :formula=\"'$K_B pubA$'\"></math-jax>, Bob may correctly encrypt\n      his message (either <math-jax :formula=\"'$mBp$'\"></math-jax> or\n      <math-jax :formula=\"'$mBq$'\"></math-jax>) and send it to Alice.\n    </p>\n\n    <img src=\"@/assets/img/perf_kripke.png\" alt=\"Image perf_kripke\" />\n\n    <p>\n      Alice then receives Bob's message and decrypts it with her private key,\n      finally alleviating any remaining indistinguishability. Thus information\n      has been fruitfully shared and everyone knows everything. While this type\n      of model does show each state correctly, it does not give a clear\n      representation of the steps that are taken in between. It is also not a\n      prerequisite for the model to first have received the key before sending\n      the message. These issues will be resolved with action models.\n    </p>\n\n    <h2>Perfect Communication - Action Model</h2>\n\n    <p>\n      Here we present the first action model. Before getting into the details of\n      the situation at hand, there are a few important distinctions to be noted\n      for all action models that we present. First of all, the\n      <it>true</it> world is represented by a thick line. Secondly, the kripke\n      structures that are shown here are no longer\n      <it>S5-Kripke structures</it>, but rather\n      <math-jax :formula=\"'$\\\\mathbb{L}_{KC\\\\otimes}$'\"></math-jax> , which\n      includes everything from <it>S5</it> and in addition adds the concept of\n      <it>actions</it>. For more information about this subject, see\n      [<router-link :to=\"{ name: 'References' }\">3</router-link>].\n    </p>\n\n    <p>\n      Now back to communicating. In the initial state, we assume Bob knows which\n      message he will send and Alice knows which key is hers. Logically, there\n      are two possible keys for Bob to receive, but in reality there is only one\n      (A1). His reception of the key defines the first action of the model and\n      results in the new Kripke model on the right.\n    </p>\n\n    <math-jax :formula=\"'$$E = \\\\{BrA1, BrA2\\\\}$$'\"></math-jax>\n\n    <math-jax\n      :formula=\"'$$R_A=\\\\{(e1,e2)| (mBp \\\\in e1)\\\\wedge (mBq \\\\in e2)\\\\}$$'\"\n    ></math-jax>\n    <math-jax :formula=\"'$$R_B= E \\\\times E$$'\"></math-jax>\n    <math-jax :formula=\"'$$\\\\textnormal{pre}(BrA1)=A1$$'\"></math-jax>\n    <math-jax :formula=\"'$$\\\\textnormal{pre}(BrA2)=A2$$'\"></math-jax>\n\n    <img\n      src=\"@/assets/img/perfect_communication_1.jpg\"\n      alt=\"Image perfect_communication_1\"\n    />\n\n    <p>\n      The second action in the protocol whereby Bob sends his message and Alice\n      receives defines the preconditions\n      <math-jax :formula=\"'$\\\\textnormal{pre}(ArmBp)=mBp$'\"> </math-jax> and\n      <math-jax :formula=\"'$\\\\textnormal{pre}(ArmBq)=mBq$'\"></math-jax>\n      which result in the union visualized in the final Kripke structure on the\n      right.\n    </p>\n\n    <math-jax :formula=\"'$$E = \\\\{ArmBp, ArmBq\\\\}$$'\"> </math-jax>\n    <math-jax :formula=\"'$$R_A = E \\\\times E$$'\"> </math-jax>\n    <math-jax :formula=\"'$$R_B=\\\\{(e,e)| e \\\\in E\\\\}$$'\"></math-jax>\n    <math-jax :formula=\"'$$\\\\textnormal{pre}(ArmBp)=mBp$$'\"> </math-jax>\n    <math-jax :formula=\"'$$\\\\textnormal{pre}(ArmBq)=mBq$$'\"> </math-jax>\n    <img\n      style=\"\"\n      src=\"@/assets/img/perfect_communication_2.jpg\"\n      alt=\"Image perfect_communication_2\"\n    />\n    <div class=\"CENTER\"></div>\n\n    <h2>Eavesdropping</h2>\n\n    <h3>S5 Model</h3>\n\n    <p>\n      In terms of epistemic logic, we now see certain nuances emerge. What is of\n      special interest is the false belief that Alice and Bob have concerning\n      whose public key they receive. Again, we can consider the simplified case\n      of Alice sending one of two possible public keys, and Bob sending one of\n      two possible messages. Again, the logic derived here can be extended to an\n      infinite number of possible keys and messages by induction. Note that\n      Eve's public key is also modelled, but only as one possible key. However,\n      this can also be expanded by induction to arbitrarily many public keys.\n      Please note that these step-by-step Kripke models fail to model key\n      ownership as perceived by Bob. In order to incorporate Eve's deception of\n      Bob formally, action models will be needed and are included in the next\n      section.\n    </p>\n\n    <p>\n      Considering the figure below with the S5 kripke models from left-to-right,\n      and then downward:\n    </p>\n\n    <ul>\n      <li>\n        In the initial state, Bob can distinguish between no public keys and\n        thus must consider all key nodes simultaneously possible through\n        accessibility relations. Bob does know the content of his own\n        prospective message however, and so there are no lateral relations for\n        Bob between possible messages. While Alice cannot distinguish between\n        possible messages of Bob, she does know the difference between her own\n        possible keys and Eve's key and therefore has no accessibility relations\n        between these nodes. Eve can only discern a difference between her own\n        public key and Alice's public key at this point, and must accept all\n        other possibilities at this point in time.\n      </li>\n      <li>\n        After Eve receives Alice's public key she can now drop the accessibility\n        relations between Alice's possible keys.\n      </li>\n      <li>\n        Once Bob receives Eve's public key (thinking that it is Alice's), all\n        key worlds become mutually exclusive for Bob as well.\n      </li>\n      <li>\n        Upon receiving and decrypting Bob's message, Eve now may distinguish all\n        possible message nodes.\n      </li>\n      <li>\n        Once Alice finally receives Bob's message (encrypted with Eve's key),\n        she can decrypt it with what she thinks is Bob's public key (though it\n        is Eve's) and finally, everyone may distinguish all possible states and\n        the information is shared.\n      </li>\n    </ul>\n\n    <p>\n      The obvious issue with this situation is that Alice and Bob may very well\n      wish to keep there information private.\n    </p>\n\n    <img src=\"@/assets/img/perf_eve_kripke.png\" alt=\"Image perf_eve_kripke\" />\n\n    <h3>Action Model</h3>\n\n    <p>\n      The introduction of an eavesdropper greatly expands the epistemic dynamics\n      of the system, and in fact modelling the caveat that Bob believes he has\n      Alice's key when he truly has Eve's key expands the combinatorics of the\n      Kripke structures to an infeasible degree if full nodal representation\n      would be kept. We therefore again rely heavily on \"inductive collapse\"\n      whereby we may assume that all possible keys are contained in a single\n      nodal representation of that key, mainly focusing on the actual keys of\n      Alice, Bob, and Eve. Besides message <it>p</it>, we will maintain the\n      extra possible message <it>q</it> (standing in for all possible messages\n      besides the actual message) to aid in understanding the development of the\n      agents their knowledge. Furthermore, realize we are again confining our\n      model to the unidirectional circumstance of Bob wanting to get a message\n      to Alice. By symmetry, this could of course define the same logic as the\n      other way around&ndash;just swap the names.\n    </p>\n\n    <ul>\n      <li>\n        In the initial state (refer to the correct pictures), we have only two\n        nodes, both contain the two public keys involved in the system (Alice's\n        and Eve's) and otherwise being split between Bob's two possible message\n        <it> p </it> (his real message) or <it> q </it> (all other possible\n        messages). On this initial state, the action-point\n        <math-jax :formula=\"'$ErA$'\"></math-jax>, related to the initial model\n        by the precondition\n        <math-jax :formula=\"'$\\\\textnormal{pre}(ErA) = pubA$'\"></math-jax>\n        , holds at every node and therefore the action-point is added to each\n        node, resulting the new kripke model with action-points\n        <math-jax :formula=\"'$ErA$'\"></math-jax>\n        Intuitively, this establishes that in all possible worlds, Eve has\n        received Alice's public key.\n      </li>\n\n      <li>\n        From the newly derived Kripke model, we again model an event that will\n        change our kripke structure. The action points here are Bob either\n        receiving Alice's key or Eve's key (\n        <math-jax :formula=\"'$BrA$'\"></math-jax>\n        or\n        <math-jax :formula=\"'$BrE$'\"></math-jax>\n        both of which are defined by the precondition of those keys existing,\n        such that\n        <math-jax :formula=\"'$\\\\textnormal{pre}(BrA) = pubA$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$\\\\textnormal{pre}(BrE) = pubE$'\"></math-jax>.\n        Importantly, Alice and Bob cannot possibly distinguish between these two\n        actions points, and therefore their accessibility relations between\n        these two possibilities creates a new model dimension, resulting in the\n        new Kripke structure, with separate pairs of nodes for Bob either having\n        Alice's key or Eve's key.\n      </li>\n\n      <li>\n        The next event simply adds the action points by which Eve receives Bob's\n        message (\n        <math-jax :formula=\"'$ErmBp$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$ErmBq$'\"></math-jax>), with preconditions\n        <math-jax :formula=\"'$\\\\textnormal{pre}(ErmBp) = pubE, mBp$'\">\n        </math-jax>\n        and\n        <math-jax :formula=\"'$\\\\textnormal{pre}(ErmBq) = pubE, mBq$'\">\n        </math-jax>\n        thereby removing her accessibility relations between all worlds\n        separated only by\n        <math-jax :formula=\"'$mBp$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$mBq$'\"></math-jax>\n        These action points are still indistinguishable by Alice, so her\n        accessibility relations remain.\n      </li>\n\n      <li>\n        Finally, Alice receives Bob's message (as passed through Eve) and thus\n        the action points\n        <math-jax :formula=\"'$ArmBp$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$ArmBq$'\"></math-jax>\n        are added with no accessibility relations, thus breaking the finally\n        horizontal accessibility relations of model&ndash;meaning that all\n        agents have learned Bob's message. We can form similar preconditions\n        here as for the previous event, namely\n        <math-jax :formula=\"'$\\\\textnormal{pre}(ArmBq) = pubA, mBq$'\">\n        </math-jax>\n        and\n        <math-jax :formula=\"'$\\\\textnormal{pre}(ArmBq) = pubA, mBq$'\">\n        </math-jax>\n      </li>\n    </ul>\n\n    <p>\n      Thus, with the aid of action models, we have modelled the important fact\n      that while Bob's information is successfully passed, Bob and Alice never\n      become aware of the difference between Eve's public key and Alice's.\n      Therefore, Eve may successfully and discretely eavesdrop on all of Alice\n      and Bobs' communication.\n    </p>\n\n    <img src=\"@/assets/img/eavesdropping_1.jpg\" alt=\"Image eavesdropping_1\" />\n    <div class=\"CENTER\"></div>\n\n    <img src=\"@/assets/img/eavesdropping_2.jpg\" alt=\"Image eavesdropping_2\" />\n    <div class=\"CENTER\"></div>\n\n    <img\n      class=\"final-step\"\n      src=\"@/assets/img/eavesdropping_3.jpg\"\n      alt=\"Image eavesdropping_3\"\n    />\n    <div class=\"CENTER\"></div>\n\n    <h2 id=\"interlock-anchor\">The interlock protocol</h2>\n\n    <h3>Action Model</h3>\n\n    <p>\n      While the protocol seems to increase in complexity, the associated\n      formalism barely does. Many of the events are similar when compared to the\n      previous two situations that we have shown, the main difference being that\n      more messages are being sent <it>and</it> that the full message is not\n      know until later. The fact that the full message is not known until later\n      makes this a very epistemically interesting situation. We can see this\n      clearly in an action model. This time we will only show the action model\n      as it may be clear by now that the usual <it>S5</it> worlds do not suffice\n      to capture the nuances of eavesdropping. As before, we have two separate\n      messages, message <it>p</it> and message <it>q</it> and two separate keys\n      <math-jax :formula=\"'$pubA$'\"></math-jax>\n      and\n      <math-jax :formula=\"'$pubE$'\"></math-jax>. The messages are now broken up\n      into two parts and the content of half a message cannot be properly\n      deciphered (due to cryptographic reasons). Both halves of <it>p</it> are\n      needed in order to <it>know</it> the content of message <it>p</it>. The\n      simple addition of breaking the message up into two parts helps the agents\n      discern whether or not there is an eavesdropper in the mix as was\n      explained in the\n      <router-link :to=\"{ name: 'Methods' }\">methods</router-link> section. We\n      use one simplification in the modelling of this situation. Usually, the\n      interlock protocol requires two-way communication, otherwise Bob would not\n      know when to send the next part of the message. If Bob simply follows the\n      first message directly by the second, then Eve can simply wait for the\n      second half to arrive. We assume that Eve does not use this stalling\n      tactic here and simply sends the message on directly.\n    </p>\n\n    <p>We can now walk through each step of the protocol using action logic:</p>\n\n    <p></p>\n\n    <ul>\n      <li>\n        In the initial state, (refer to correct pictures) there are two nodes\n        that differ based on the possible message to be sent by Bob (denoted by\n        the prepositions\n        <math-jax :formula=\"'$mBp$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$mBq$'\"></math-jax>, read \"message p from Bob\").\n        Alice and Eve are unable to distinguish between these worlds in the\n        first step, because they have not received any messages yet. The event\n        <math-jax :formula=\"'$ErA$'\"></math-jax>\n        (read \"Eve receives pubA\") is linked to both nodes through the\n        precondition\n        <math-jax :formula=\"'$\\\\textnormal{pre}(ErA)=pubA$'\"> </math-jax>\n      </li>\n      <li>\n        After Eve receives Alice her public key, she sends Bob one of the keys\n        she has in possession. This can be her own or Alice her key. She chooses\n        to send her own key, because that makes it possible to eavesdrop. Both\n        actions are dependent on the preconditions\n        <math-jax :formula=\"'$\\\\textnormal{pre}(BrA)=pubA$'\"> </math-jax>\n        and\n        <math-jax :formula=\"'$\\\\textnormal{pre}(BrE)=pubE$'\"> </math-jax>. Alice\n        and Bob are both unable to discern between which key has been sent.\n        Alice has no idea which key was sent and Bob is unable to discern the\n        difference, so he believes it to be Alice her key. This adds extra\n        dimensionality to the model, because of extra uncertainty relationships.\n      </li>\n      <li>\n        The model that follows from the previous step is the point where the\n        keys have been fully exchanged. Now the messages can be sent. The first\n        half of the message is being sent (which is represented by\n        <math-jax :formula=\"'$ErmBp[0]$'\"></math-jax>, read \"Eve receives\n        message p[0] from Bob\"). There are two distinct actions\n        <math-jax :formula=\"'$ErmBp[0]$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$ErmBq[0]$'\"></math-jax>, and the associated\n        preconditions\n        <math-jax :formula=\"'$pre(ErmBp[0]) = pubE, mBp$'\"> </math-jax>\n        and\n        <math-jax :formula=\"'$pre(ErmBq[0]) = pubE, mBq$'\"> </math-jax>. These\n        preconditions link it to the correct worlds in the Kripke model.\n      </li>\n      <li>\n        This step is much the same as the previous step, but now Alice receives\n        the message. There are technically two options for Eve here. She can\n        either send the message Bob send, which Alice cannot decrypt due to\n        having the wrong key. Or she can make up her own message, which is most\n        likely not going to be the same as Bob's message. To model Alice\n        receiving half the message from Bob (unaltered), we can use\n        <math-jax :formula=\"'$pre(ArmBp[0]) = pubA, mBp$'\"> </math-jax>\n        and\n        <math-jax :formula=\"'$pre(ArmBq[0]) = pubA, mBq$'\"> </math-jax>\n      </li>\n      <li>\n        Now Bob sends the second part of the message. This is the first part\n        where some accessibility relationships start changing and agents start\n        to learn information. Once Eve receives Bob's second message, she will\n        know\n        <math-jax :formula=\"'$mBp$'\"></math-jax>\n        meaning she can distinguish between the worlds with\n        <math-jax :formula=\"'$mBp$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$mBq$'\"></math-jax>. The prepositions\n        <math-jax :formula=\"'$ErmBp[1]$'\"></math-jax>\n        and\n        <math-jax :formula=\"'$ErmBq[1]$'\"></math-jax>\n        is added to the model with the preconditions\n        <math-jax :formula=\"'$pre(ErmBp[1]) = pubE, mBp$'\"> </math-jax>\n        and\n        <math-jax :formula=\"'$pre(ErmBq[1]) = pubE, mBq$'\"> </math-jax>.\n      </li>\n      <li>\n        Now Alice receives the second part of the message from Eve as she tries\n        to remain transparent to avoid detection. The actions are much the same\n        with\n        <math-jax :formula=\"'$pre(ArmBp[1]) = pubA, mBp$'\"> </math-jax>\n        and\n        <math-jax :formula=\"'$pre(ArmBq[1]) = pubA, mBq$'\"> </math-jax>. There\n        is one important caveat here though. Since the message was encrypted\n        with Eve's public key and not Alice her public key, Alice is now unable\n        to decrypt the message. She is unable to read the contents of the\n        message, so therefore she cannot distinguish between those worlds. But\n        she does know that a different public key was used to encrypt the\n        message, which implies that there is an eavesdropper in the middle. This\n        leads us to the final kripke model.\n      </li>\n    </ul>\n\n    <p>\n      We can see that the action model does not actually become much more\n      complex than before. It is a relatively simple protocol that leads to\n      interesting epistemic results, because the final kripke model is\n      significantly different than with eavesdropping. So, are we now in the\n      presence of an Eve? Indeed, it seems so.\n    </p>\n\n    <img style=\"\" src=\"@/assets/img/interlock_1.jpg\" alt=\"Image interlock_1\" />\n    <img style=\"\" src=\"@/assets/img/interlock_2.jpg\" alt=\"Image interlock_2\" />\n    <img style=\"\" src=\"@/assets/img/interlock_3.jpg\" alt=\"Image interlock_3\" />\n    <img\n      class=\"final-step\"\n      src=\"@/assets/img/interlock_4.jpg\"\n      alt=\"Image interlock_4\"\n    />\n  </div>\n</template>\n\n<script>\nimport MathJax from \"../components/MathJax.vue\";\nexport default {\n  components: { MathJax },\n  name: \"Formalism\",\n};\n</script>\n\n<style scoped>\n.final-step {\n  transform: scale(0.6);\n}\n\n.final-step:hover {\n  transform: scale(0.8);\n}\n</style>\n","<template>\n  <span ref=\"mathJaxEl\" v-html=\"formula\" class=\"e-mathjax\"></span>\n</template>\n\n<style></style>\n\n<script type=\"text/javascript\">\nexport default {\n  props: [\"formula\"],\n};\n</script>\n","import { render } from \"./MathJax.vue?vue&type=template&id=3875f8ae\"\nimport script from \"./MathJax.vue?vue&type=script&lang=js\"\nexport * from \"./MathJax.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { render } from \"./Formalism.vue?vue&type=template&id=06f47628&scoped=true\"\nimport script from \"./Formalism.vue?vue&type=script&lang=js\"\nexport * from \"./Formalism.vue?vue&type=script&lang=js\"\n\nimport \"./Formalism.vue?vue&type=style&index=0&id=06f47628&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-06f47628\"\n\nexport default script","<template>\n  <div class=\"blog\">\n    <h1>{{ $route.name }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Discussion\",\n};\n</script>\n\n<style scoped></style>\n","import { render } from \"./Discussion.vue?vue&type=template&id=cf9be6fa\"\nimport script from \"./Discussion.vue?vue&type=script&lang=js\"\nexport * from \"./Discussion.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"blog\">\n    <h1>{{ $route.name }}</h1>\n    <p>\n      If you want to send some piece of information to\n      <it>only</it> your friend and no one else, then you will have to have some\n      technique to ensure that no one else is able to read this piece of\n      information. This is where the concept of <it>encryption</it> comes in.\n      Encryption is the process of converting a message into a secret coded form\n      that cannot be read without knowing how to decode the secret coded form\n      back into the original message. There are two important takeaways from\n      this section about encryption. First of all, understanding how asymmetric\n      key encryption works in general. And secondly, why we cannot decode parts\n      of a message that have been encrypted using the asymmetric encryption\n      algorithm.\n    </p>\n\n    <p>\n      At their core, the encryption algorithms can be defined as the symmetric\n      technique having only one key, while the asymmetric technique has two\n      keys. Symmetric encryption uses one key in order to\n      <it CLASS=\"textit\">both</it> lock and unlock a piece of information.\n      Asymmetric encryption uses one key in order to lock the information and\n      another key to unlock the information. Symmetric keys are generally not\n      preferred as they can be easily copied or stolen, especially when they are\n      being transferred to someone else who would need to decrypt the\n      information that you send them. Not only would this mean that the message\n      could be decrypted by someone else. It also means that there is no way in\n      which the receiver of a message can be sure that the message comes from\n      the original sender. This leaves us with asymmetric encryption.\n    </p>\n\n    <p>Asymmetric encryption generally works as follows:</p>\n\n    <ul>\n      <li>\n        There is a key that locks information which can be send out into public.\n        Everyone can have access to the public key.\n      </li>\n      <li>\n        There is another key which is kept private and will be used for\n        unlocking any information that was locked using the public key.\n      </li>\n    </ul>\n\n    <p>\n      This asymmetric key-pair gives a secure way for agents to send information\n      back and forth (as long as both agents have a secure asymmetric key-pair\n      of each other). Take for instance, Alice (on the left) and Bob (on the\n      right) below. Bob wants to send a message, Alice can encrypt it with her\n      public key and decrypt it with her private key.\n    </p>\n\n    <div class=\"image encryptiongif\"></div>\n\n    <p>\n      Understanding the basic process of asymmetric cryptography is important in\n      order to understand the epistemic logic that follows from it, specifically\n      for the interlock protocol. However, to understand the Interlock protocol\n      that will be explained later, we need to have an understanding about why\n      we cannot decode half of an encoded message.\n    </p>\n    <p>\n      The other realisation that is important is that we need the entire\n      encrypted message in order to decode it. If we break it into two, and\n      decode one of the halves, we get gibberish back. Somewhat of an analogy\n      might be found in breaking a lock in two. It becomes hard to unlock a half\n      of a lock simply because it is broken. With digital locks, a broken lock\n      cannot be unlocked (unlike real life where a broken lock does unlock the\n      thing hiding behind it).\n    </p>\n\n    <p>\n      The following section has been added for completeness' sake. It describes\n      an example of how RSA (an asymmetric encryption algorithm) works. We left\n      this in as it might help better understand encryption. The next section\n      (hiding under the button) can safely be skipped, if encryption is clear.\n    </p>\n\n    <p>\n      <button\n        type=\"button\"\n        v-on:click=\"toggleCollapsible\"\n        :class=\"{ collapsible: true, active: isShowingCollapsible }\"\n      >\n        Show Example Encryption Algorithm\n      </button>\n    </p>\n    <div\n      :class=\"{\n        content: !isShowingCollapsible,\n        'content-not-hidden': isShowingCollapsible,\n      }\"\n    >\n      <h2>An Example Encryption Algorithm</h2>\n\n      <p>\n        Underlying asymmetric public key cryptography is an encryption algorithm\n        which relies on a lot of complex mathematical properties. RSA&nbsp; is\n        such an encryption algorithm that can be used for asymmetric\n        cryptography. The step-by-step process on how this algorithm works is\n        given below.\n      </p>\n\n      <p>\n        First we will have to generate a RSA key-pair. We can do that as\n        follows:\n      </p>\n\n      <ol>\n        <li>\n          Choose 2 large prime number <it>p</it> and <it>q</it>. As an example\n          we can take:\n          <math-jax :formula=\"'$$p=61$$'\"></math-jax>\n          <math-jax :formula=\"'$$q=79$$'\"></math-jax>\n        </li>\n        <li>\n          Compute\n          <math-jax :formula=\"'$n = p q$'\"></math-jax>\n          and\n          <math-jax :formula=\"'$z = (p-1) (q - 1)$'\"></math-jax>\n          <math-jax :formula=\"'$$n = 61 * 79 = 4819$$'\"></math-jax>\n          <math-jax :formula=\"'$$z = (61-1)(79-1)=60 * 78 = 4680$$'\"></math-jax>\n        </li>\n        <li>\n          Choose <it>e</it> such that\n          <math-jax :formula=\"'$e < z$'\"> </math-jax> and that <it>e</it> has no\n          common factors with <it>z</it>.\n          <br />\n          <math-jax :formula=\"'$$e = 19$$'\"></math-jax>\n        </li>\n        <li>\n          Choose <it>d</it> such that <math-jax :formula=\"'ed - 1'\" /> is\n          exactly divisible by <it>z</it>.\n          <math-jax :formula=\"'$$d = 739$$'\"></math-jax>\n        </li>\n        <li>\n          Now we have our public key as\n          <math-jax :formula=\"'$(n, e)$'\"></math-jax>\n          and our private key as\n          <math-jax :formula=\"'$(n, d)$'\"></math-jax>\n          <math-jax :formula=\"'$$Key_{public} = (4819,19)$$'\"></math-jax>\n          <math-jax :formula=\"'$$Key_{private} = (4819,739)$$'\"></math-jax>\n        </li>\n      </ol>\n\n      <p>\n        Now that we have a public and private key-pair, we can encrypt and\n        decrypt messages. In order to encrypt a message, the message first needs\n        to be transformed into a numerical value. If we were now to encrypt the\n        message \"Cuddly Llamas\", then we would get the following example:\n      </p>\n\n      <ol>\n        <li>\n          First, we transform \"Cuddly Llamas\" into its binary value\n          representation (using ASCII):\n          <pre>\n        0100001101110101011001000110010001101100011110010010000\n        0010011000110110001100001011011010110000101110011\n</pre\n          >\n        </li>\n        <li>\n          Then encrypt the numerical representation using\n          <math-jax :formula=\"'$C = m ^ e (mod N)$'\"></math-jax> for the\n          message, resulting in:\n          <pre>\n        0001100101011100010011011100101111001010010111100101000\n        1011001110011010001101000000010110101000100100011000101\n        1001110011010110101110001000110110110101101011100011010\n        0100\n</pre\n          >\n          Note that the if we take half of the encrypted message, it will\n          decrypt to something else than \"Cuddly\".\n          <br />\n          <br />\n        </li>\n        <li>\n          Decrypting the encrypted message using\n          <math-jax :formula=\"'$m = C ^ d (mod N)$'\"></math-jax>\n          would result in the original message:\n          <pre>\n        0100001101110101011001000110010001101100011110010010000\n        0010011000110110001100001011011010110000101110011\n</pre\n          >\n        </li>\n        <li>\n          Transforming this numerical result back into text gives:\n          <pre>\n        Cuddly Llamas\n</pre\n          >\n        </li>\n      </ol>\n    </div>\n  </div>\n</template>\n\n<script>\nimport MathJax from \"../components/MathJax.vue\";\nexport default {\n  components: { MathJax },\n  name: \"Encryption\",\n  data() {\n    return {\n      isShowingCollapsible: false,\n    };\n  },\n  mounted() {\n    try {\n      window.MathJax.typeset();\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  methods: {\n    toggleCollapsible: function toggleCollapsible() {\n      console.log(\"collapsing toggle\");\n      this.isShowingCollapsible = !this.isShowingCollapsible;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.encryptiongif {\n  background: url(\"../assets/img/asym-encryption-static.png\");\n  width: 896px;\n  height: 179px;\n}\n\n.encryptiongif:hover {\n  background: url(\"../assets/img/asym-encryption.gif\");\n  cursor: pointer;\n}\n\n.collapsible {\n  display: flex;\n  justify-content: center;\n  background-color: #777;\n  color: white;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n}\n\n.active,\n.collapsible:hover {\n  background-color: #555;\n}\n\n.content {\n  padding: 0.5em 6em;\n  display: none;\n  overflow: hidden;\n  background-color: #f1f1f1;\n}\n\n.content-not-hidden {\n  padding: 0.5em 6em;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: #f1f1f1;\n}\n\n@media (max-width: 767px) {\n  .encryptiongif {\n    width: 194px;\n    height: 157px;\n    background: url(\"../assets/img/gif-not-supported-message.jpg\");\n  }\n\n  .encryptiongif:hover {\n    background: url(\"../assets/img/gif-not-supported-message.jpg\");\n    cursor: pointer;\n  }\n}\n</style>\n","import { render } from \"./Encryption.vue?vue&type=template&id=9815b01a&scoped=true\"\nimport script from \"./Encryption.vue?vue&type=script&lang=js\"\nexport * from \"./Encryption.vue?vue&type=script&lang=js\"\n\nimport \"./Encryption.vue?vue&type=style&index=0&id=9815b01a&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-9815b01a\"\n\nexport default script","<template>\n  <div\n    style=\"\n      display: flex;\n      padding-top: 100px;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    \"\n  >\n    <div>\n      <h1>Error 404 - Page not found</h1>\n    </div>\n    <div>\n      <h2>\n        Perhaps you are looking for\n        <router-link :to=\"{ name: 'Home' }\">home?</router-link>\n      </h2>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Home\",\n};\n</script>\n\n<style scoped></style>\n","import { render } from \"./NotFound.vue?vue&type=template&id=437b6960\"\nimport script from \"./NotFound.vue?vue&type=script&lang=js\"\nexport * from \"./NotFound.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\r\n  <div class=\"blog\">\r\n    <h1>{{ $route.name }}</h1>\r\n\r\n    <ol>\r\n      <li>\r\n        Malvin Gattinger and Jan Van Eijck. “Towards model checking\r\n        crypto-graphic protocols with dynamic epistemic logic”. In: Proc. LAMAS.\r\n        Cite-seer. 2015, pp. 1–14.\r\n      </li>\r\n      <li>\r\n        Ronald L Rivest and Adi Shamir. “How to expose an eavesdropper”. In:\r\n        Communications of the ACM27.4 (1984), pp. 393–394.\r\n      </li>\r\n      <li>\r\n        Hans Van Ditmarsch, Wiebe van Der Hoek, and Barteld Kooi. Dynamic\r\n        epistemic logic. Vol. 337. Springer Science & Business Media, 2007.\r\n      </li>\r\n\t  <li>\r\n\t\tDaniel Solove (2007). I've got nothing to hide and other misunderstandings of privacy. \r\n\t\tSan Diego L. Rev., 44, 745.\r\n\t  </li>\r\n    </ol>\r\n\r\n    <p>\r\n      Not all of the code for this website was written by us (although it was heavily modified for our purposes), an informal\r\n      reference is made to the location where the relevant code was found:\r\n      <ul>\r\n      \t\t<li>\r\n\t\t  Responsive sidebar menu (22-06-2021):\r\n      \t  https://www.cssscript.com/css-responsive-hamburger-navigation/\r\n\t\t\t</li>\r\n      </ul>\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Methods\",\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n","import { render } from \"./References.vue?vue&type=template&id=24083b4c&scoped=true\"\nimport script from \"./References.vue?vue&type=script&lang=js\"\nexport * from \"./References.vue?vue&type=script&lang=js\"\nscript.render = render\nscript.__scopeId = \"data-v-24083b4c\"\n\nexport default script","import { createWebHistory, createRouter } from \"vue-router\";\nimport Home from \"@/views/Home.vue\";\nimport Simulation from \"@/views/Simulation.vue\";\nimport Methods from \"@/views/Methods.vue\";\nimport Formalism from \"@/views/Formalism.vue\";\nimport Discussion from \"@/views/Discussion.vue\";\nimport Encryption from \"@/views/Encryption.vue\";\nimport NotFound from \"@/views/NotFound.vue\";\nimport References from \"@/views/References.vue\";\n\nconst routes = [\n    {\n        path: \"/\",\n        name: \"Home\",\n        component: Home,\n    },\n    {\n        path: \"/formalism\",\n        name: \"Formalism\",\n        component: Formalism,\n    },\n    {\n        path: \"/encryption\",\n        name: \"Encryption\",\n        component: Encryption,\n    },\n    {\n        path: \"/methods\",\n        name: \"Methods\",\n        component: Methods,\n    },\n    {\n        path: \"/discussion\",\n        name: \"Discussion\",\n        component: Discussion,\n    },\n    {\n        path: \"/simulation\",\n        name: \"Simulation\",\n        component: Simulation,\n    },\n    {\n        path: \"/references\",\n        name: \"References\",\n        component: References,\n    },\n    {\n        path: \"/:pathMatch(.*)*\",\n        component: NotFound,\n    },\n];\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes,\n});\n\nexport default router;\n","import { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\n\ncreateApp(App).use(router).mount(\"#app\");\n","module.exports = __webpack_public_path__ + \"img/perfect_communication_1.4e5ec8af.jpg\";","module.exports = __webpack_public_path__ + \"img/eavesdropping_1.a635af96.jpg\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Formalism.vue?vue&type=style&index=0&id=06f47628&scoped=true&lang=css\"","module.exports = __webpack_public_path__ + \"img/perf_kripke.1f9ac272.png\";","module.exports = __webpack_public_path__ + \"img/perfect_communication_2.7ab74b98.jpg\";","module.exports = __webpack_public_path__ + \"img/interlock_3.68bef7e2.jpg\";","module.exports = __webpack_public_path__ + \"img/interlock_2.439d094d.jpg\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Home.vue?vue&type=style&index=0&id=47798d78&scoped=true&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=ee6613e0&lang=css\"","module.exports = __webpack_public_path__ + \"img/interlock_1.8dd97026.jpg\";","module.exports = __webpack_public_path__ + \"img/eavesdropping_2.c58f3ea9.jpg\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Simulation.vue?vue&type=style&index=0&id=8b16aab6&style=scss&scoped=true&lang=css\"","module.exports = __webpack_public_path__ + \"img/incognito_logo.5acf4359.png\";"],"sourceRoot":""}